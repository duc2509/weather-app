{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","api","useState","weather","setWeather","query","setQuery","className","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","main","name","separator","newDate","Date","date","getDate","month","getMonth","year","getFullYear","getCurrentDate","feels_like","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0PA8EeA,MAzEf,WAEE,IAAMC,EACC,mCADDA,EAEE,2CAJK,EAMiBC,mBAAS,IAN1B,mBAMNC,EANM,KAMGC,EANH,OAOaF,mBAAS,IAPtB,mBAONG,EAPM,KAOCC,EAPD,KAgCb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aAGb,2BACEC,KAAK,OACLD,UAAU,aACVE,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOC,QACnCA,MAAOR,EACPS,WAnCO,SAACC,GACE,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIhB,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACvDiB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLjB,EAAWiB,GACXf,EAAS,UAgCa,oBAAhBH,EAAQmB,KACd,yBAAKf,UAAU,WACb,yBAAKA,UAAU,QAAQJ,EAAQoB,MAC/B,yBAAKhB,UAAU,QA/BzB,WAA0C,IAAlBiB,EAAiB,uDAAL,IAC9BC,EAAU,IAAIC,KACdC,EAAOF,EAAQG,UACfC,EAAQJ,EAAQK,WAAa,EAC7BC,EAAON,EAAQO,cAEnB,MAAM,GAAN,OAAUL,GAAV,OAAiBH,GAAjB,OACEK,EAAQ,GAAR,WAAiBA,GAAjB,UAA8BA,IADhC,OAEGL,GAFH,OAEeO,GAuBgBE,IACvB,yBAAK1B,UAAU,mBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBAAf,aACA,yBAAKA,UAAU,cAAcJ,EAAQmB,KAAKY,WAA1C,MAEF,yBAAK3B,UAAU,UACb,yBAAKA,UAAU,sBAAf,eACA,yBAAKA,UAAU,QAAQJ,EAAQmB,KAAKa,KAApC,MAEF,yBAAK5B,UAAU,UACb,yBAAKA,UAAU,sBAAf,UACA,yBAAKA,UAAU,UAAUJ,EAAQA,QAAQ,GAAGmB,SAKlD,MC3DUc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.41a7f0c8.chunk.js","sourcesContent":["import React, { useState,Component } from \"react\";\nimport \"./App.css\";\n\n\n\nfunction App() {\n  // api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}\n  const api = {\n    key: \"b52b9eddd492159aad14f955a3637896\",\n    base: \"https://api.openweathermap.org/data/2.5/\",\n  };\n  const [weather, setWeather] = useState({});\n  const [query, setQuery] = useState(\"\");\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n        });\n    }\n  };\n  function getCurrentDate(separator = \"/\") {\n    let newDate = new Date();\n    let date = newDate.getDate();\n    let month = newDate.getMonth() + 1;\n    let year = newDate.getFullYear();\n\n    return `${date}${separator}${\n      month < 10 ? `0${month}` : `${month}`\n    }${separator}${year}`;\n  }\n  \n  \n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        \n        \n        <input\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search...\"\n          onChange={(e) => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={search}\n        />\n\n        {typeof weather.main != \"undefined\" ? (\n          <div className=\"details\">\n            <div className=\"city\">{weather.name}</div>\n            <div className=\"date\">{getCurrentDate()}</div>\n            <div className=\"weather-details\">\n              <div className=\"detail\">\n                <div className=\"detail-description\">Feel like</div>\n                <div className=\"feels-like\">{weather.main.feels_like}C</div>\n              </div>\n              <div className=\"detail\">\n                <div className=\"detail-description\">Temparature</div>\n                <div className=\"temp\">{weather.main.temp}C</div>\n              </div>\n              <div className=\"detail\">\n                <div className=\"detail-description\">Status</div>\n                <div className=\"status\">{weather.weather[0].main}</div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}